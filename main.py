import os
import time
from openai import OpenAI
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager


def generate_field_data(field_label):
    client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"),)
    prompt = f"Generate a realistic value for the field labeled '{field_label}':"
    print(prompt)
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

def detect_form_fields(driver):
    form_fields = {}
    wait = WebDriverWait(driver, 10)

    # Find all input and textarea elements
    inputs = driver.find_elements(By.TAG_NAME, 'input')
    textareas = driver.find_elements(By.TAG_NAME, 'textarea')
    all_elements = inputs + textareas

    for element in all_elements:
        field_type = element.get_attribute('type') if element.tag_name == 'input' else 'textarea'
        field_id = element.get_attribute('id')
        field_name = element.get_attribute('name')
        
        if not field_id and not field_name:
            continue
        
        # Attempt to find the associated label
        label = None
        if field_id:
            try:
                label_element = driver.find_element(By.XPATH, f"//label[@for='{field_id}']")
                label = label_element.text
            except:
                pass
        
        if not label and field_name:
            try:
                label_element = driver.find_element(By.XPATH, f"//label[contains(@for, '{field_name}')]")
                label = label_element.text
            except:
                pass
        
        if not label:
            try:
                label_element = element.find_element(By.XPATH, ".//preceding::label[1]")
                label = label_element.text
            except:
                pass

        if label:
            form_fields[label] = {'type': field_type, 'id': field_id, 'name': field_name}

    return form_fields


def fill_form_fields(driver, form_fields):
    for label, info in form_fields.items():
        field_type = info['type']
        field_id = info['id']
        field_name = info['name']
        
        value = generate_field_data(label)
        print(value)

        if field_type in ['text', 'email', 'tel']:
            if field_id:
                element = driver.find_element(By.ID, field_id)
            elif field_name:
                element = driver.find_element(By.NAME, field_name)
            
            if value:
                element.send_keys(value)
        elif field_type == 'textarea':
            if field_id:
                driver.find_element(By.ID, field_id).send_keys(value)
            elif field_name:
                driver.find_element(By.NAME, field_name).send_keys(value)
        elif field_type == 'file':
            # Assuming the resume file path is static or could be generated by GPT-4
            resume_path = "/Users/amanbarthwal/Library/CloudStorage/GoogleDrive-amanbarthwal0110@gmail.com/My Drive/Programming/Projects/Portfolio/Resume.pdf"
            element = driver.find_element(By.ID, field_id)
            element.send_keys(resume_path)

def submit_form(driver):
    time.sleep(10)  # Wait for 10 seconds before submitting
    submit_button = driver.find_element(By.ID, "input_9")
    submit_button.click()


driver = webdriver.Chrome(ChromeDriverManager().install())
driver.get("https://iab-test.netlify.app")
form_fields = detect_form_fields(driver)
fill_form_fields(driver, form_fields)
submit_form(driver)
